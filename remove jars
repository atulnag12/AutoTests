- name: Remove old JAR files from release if lib exists
  shell: |
    for jar in {{ pre_stage_dir }}/*/{{ folder_name }}/lib/*.jar; do
      jar_name=$(basename $jar)  # Extract the full filename (e.g., library-1.0.0.jar)
      jar_base_name=$(echo $jar_name | sed 's/-[0-9].*\.jar$/.jar/')  # Get the base name (library.jar)
      
      # Check if any version of the same library exists in the release directory
      if ls "{{ release_directory }}/{{ folder_name }}/lib/$jar_base_name" >/dev/null 2>&1; then
        rm -f "{{ release_directory }}/{{ folder_name }}/lib/$jar_base_name"
      fi
    done
  when: lib_dir_status.stat.exists
  register: remove_jars
  failed_when: false









- name: Print release_directory, pre_stage_dir, and container_groups
  debug:
    msg:
      - "release_directory: {{ release_directory }}"
      - "pre_stage_dir: {{ pre_stage_dir }}"
      - "container_groups: {{ container_groups }}"



- name: Remove matching JAR files from release_directory/lib
  shell: |
    # Iterate over all JAR files in pre_stage_dir and its subdirectories
    find {{ pre_stage_dir }} -type f -name "*.jar" | while read -r jar; do
      # Extract the base name of the JAR file
      jar_name=$(basename "$jar")
      
      # Check if the JAR file exists in release_directory/lib
      if ls "{{ release_directory }}/lib/$jar_name" >/dev/null 2>&1; then
        echo "Removing JAR: {{ release_directory }}/lib/$jar_name"
        rm -f "{{ release_directory }}/lib/$jar_name"
      fi
    done
