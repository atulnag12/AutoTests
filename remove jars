- name: Remove old JAR files from release if lib exists
  shell: |
    for jar in {{ pre_stage_dir }}/*/{{ folder_name }}/lib/*.jar; do
      jar_name=$(basename $jar)  # Extract the full filename (e.g., library-1.0.0.jar)
      jar_base_name=$(echo $jar_name | sed 's/-[0-9].*\.jar$/.jar/')  # Get the base name (library.jar)
      
      # Check if any version of the same library exists in the release directory
      if ls "{{ release_directory }}/{{ folder_name }}/lib/$jar_base_name" >/dev/null 2>&1; then
        rm -f "{{ release_directory }}/{{ folder_name }}/lib/$jar_base_name"
      fi
    done
  when: lib_dir_status.stat.exists
  register: remove_jars
  failed_when: false









- name: Print release_directory, pre_stage_dir, and container_groups
  debug:
    msg:
      - "release_directory: {{ release_directory }}"
      - "pre_stage_dir: {{ pre_stage_dir }}"
      - "container_groups: {{ container_groups }}"



- name: Remove JAR files from release_directory/lib based on pre_stage_dir
  shell: |
    # Debugging: Print directories
    echo "Pre-stage directory: {{ pre_stage_dir }}"
    echo "Release directory: {{ release_directory }}/lib"

    # Recursively find all JAR files up to 4 nested levels in pre_stage_dir
    find "{{ pre_stage_dir }}" -mindepth 1 -maxdepth 5 -type f -name "*.jar" | while read -r pre_stage_jar; do
      # Extract the base name without the version
      jar_name=$(basename "$pre_stage_jar")
      jar_base_name=$(echo "$jar_name" | sed -E 's/-[0-9.]+\.jar$/.jar/')

      # Debugging: Print the extracted base name
      echo "Processing JAR: $pre_stage_jar (Base name: $jar_base_name)"

      # Find matching files in release_directory/lib
      matching_files=$(find "{{ release_directory }}/lib" -type f -name "$jar_base_name*")

      # If matching files are found, delete them
      if [ -n "$matching_files" ]; then
        echo "Found matching files in release_directory/lib:"
        echo "$matching_files"
        echo "Removing..."
        echo "$matching_files" | xargs rm -f
      else
        echo "No matching files found for $jar_base_name in release_directory/lib."
      fi
    done
  when: lib_dir_status.stat.exists
  register: remove_jars
  failed_when: false



